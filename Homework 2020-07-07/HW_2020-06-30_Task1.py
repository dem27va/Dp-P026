negatives = 0   #Вводим счетчик отрицательных множителей для реализации умножения отрицательных чисел

#Проверка ввода первого множителя 
while True:
    number1 = input('Введите множитель 1: ')
    if number1.isnumeric():                                 #Если введены цифры
        number1 = int(number1)                              #Присваиваем множителю1 числовое значение и идем дальше
        break

    elif number1[0] == '-':                                 #Если первый символ введенной строки "-"
        if number1[1:].isnumeric():                         #Проверяем являются ли остальные симворлы в строке числами
            number1 = int(number1[1:])                      #Если да, то присваиваем множителю1 числовое значение без минуса
            negatives += 1                                  #Увелисчиваем счетчик отрицательных на 1 и идем дальше
            break
        else:                                               #Если символы в строке, начиная со сторой позиции, не цифры - неправильный ввод
            print('Неверный ввод. Введите целое число')
            continue

    else:                                                   #Если строка состоит не из цифр и начинается не с "-" - неправильный ввод
        print('Неверный ввод. Введите целое число')
        continue

#Аналогичная проверка ввода второго множителя
while True:
    number2 = input('Введите множитель 2: ')
    if number2.isnumeric():
        number2 = int(number2)
        break
    
    elif number2[0] == '-':
        if number2[1:].isnumeric():
            number2 = int(number2[1:])
            negatives += 1
            break
        else:
            print('Неверный ввод. Введите целое число')
            continue

    else:
        print('Неверный ввод. Введите целое число')
        continue

tempNumber = number1                    #Вспомогательная переменная для записи промежуточных значений при разложении числа на слагаемые 2^n. Изначально приравниеваем к значению одного из множителей
twoPowerNArr = []                       #Массив слагаемых 2^i, на которые раскладывается число
powerOfTwoArr = []                      #Массив показателей степени двойки
result = 0                              #Результат произведения
i = 0                                   #Показатель степени двойки, используемый при разложении числа на слагаемые 2^i

#Раскалдываем число на слагаемые 2^i
while sum(twoPowerNArr) != number1:     #Запускаем цикл, который работает до пока сумма салагаемых 2^i не равна раскладываемому числу
    
    if 2**i < tempNumber:               #Если 2^i меньше числа, которое мы хотим разложить
        i += 1                          #Увеличиваем показатель степени на 1 и продолжаем

    elif 2**i > tempNumber:             #Если 2^i больше числа, которое мы хотим разложить
        twoPowerNArr.append(2**(i-1))   #Записываем в массивы слагаемых 2^i значение 2^(i-1)
        powerOfTwoArr.append(i-1)       #Записываем в массивы показателей степени двойки значение i-1
        tempNumber -= 2**(i-1)          #Умельшаем вспом переменную на значение  2^(i-1) и получаем новое число, которое над раскладывать на слагаемые 2^i
        i = 0                           #Обнуляем показатель степени двойки и переходим к новой итерации цикла с новым раскладываемым числом и обнуленным показателем степени
        
    elif 2**i == tempNumber:            #Если 2^i  равно числу, которе мы хотим разложить 
        twoPowerNArr.append(2**i)       #Записываем в массивы слагаемых 2^i значение 2^i
        powerOfTwoArr.append(i)         #Записываем в массивы показателей степени двойки значение i

#
for pow in powerOfTwoArr:               #Для каждого полученного показателя степени двойки
    result += (number2 << pow)          #Выполняем побитовый сдвиг на соответствующее значение и увеличиваем значение перменной результата умножения

#Выводим результат умножения с учетов ввода отрицательных чисел
if negatives == 0 or negatives == 2:
    print('Произведение: ', result)
else:
    print('Произведение: ', result * (-1))
